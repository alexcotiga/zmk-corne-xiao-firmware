#include "zmk-helpers/helper.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define NAV 1

&sk { quick-release; };

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift

ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)

// Alt+Tab swapper, requires PR #1366

ZMK_TRI_STATE(swapper,
    bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
    ignored-key-positions = <1 19 21 32 33 34 35 36 37 38 39 40 41>;
    ignored-layers = <1>;
)

&caps_word { /delete-property/ ignore-modifiers; };

&lt {
    tapping-term-ms = <200>;
    flavor = "hold-preferred";
};

/ {
    //    macros {
    //        cddot: cddot {
    //            compatible = "zmk,behavior-macro";
    //            #binding-cells = <0>;
    //            bindings = <&kp DOT &kp DOT &kp FSLH>, <&macro_tap>, <&cddot>;
    //
    //            label = "CDDOT";
    //        };
    //    };
    //
    //    combos {
    //        compatible = "zmk,combos";
    //
    //        dotdot {
    //            bindings = <&cddot>;
    //            key-positions = <33 28>;
    //            layers = <2>;
    //        };
    //    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -------------------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |                    |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |                    |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |  MUTE  |  |        |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |                    | ENT | RSE  | ALT |

            bindings = <
&kp TAB      &kp Q  &kp W  &kp E           &kp R  &kp T                         &kp Y      &kp U  &kp I        &kp O    &kp P          &kp BSPC
&smart_shft  &kp A  &kp S  &kp D           &kp F  &kp G                         &kp H      &kp J  &kp K        &kp L    &kp SQT        &smart_shft
&kp ESC      &kp Z  &kp X  &kp C           &kp V  &kp B      &none  &kp C_MUTE  &kp N      &kp M  &kp COMMA    &kp DOT  &kp SEMICOLON  &key_repeat
                           &lt 5 C_REPEAT  &sl 1  &lt 3 ESC                     &kp SPACE  &sl 2  &lt 6 ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        NAV {
            // ------------------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |                    |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |                    | LFT | DWN |  UP | RGT |     |  F12 |
            // | SHFT | F1  | F2  | F3  | F4  | F5  |  boot  |  |        |  F6 | F7  | F8  | F9  | F10 |  F11 |
            //                    | GUI |     | SPC |                    | ENT |     | ALT |

            bindings = <
&trans   &kp LG(W)             &kp LG(LS(LEFT_BRACKET))  &kp LG(LS(RIGHT_BRACKET))  &kp LG(T)          &trans                 &kp PAGE_UP        &kp BACKSPACE       &kp UP_ARROW  &kp DELETE           &trans         &trans
&kp ESC  &sk LSHFT             &sk LCTRL                 &sk LALT                   &sk LGUI           &trans                 &kp LA(BACKSPACE)  &kp LEFT            &kp DOWN      &kp RIGHT            &kp ENTER      &kp Q
&trans   &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)     &kp LA(LG(LEFT))           &kp LA(LG(RIGHT))  &trans  &none  &trans  &kp PAGE_DOWN      &kp LG(LEFT_ARROW)  &kp TAB       &kp LG(RIGHT_ARROW)  &kp LG(GRAVE)  &trans
                                                         &trans                     &trans             &trans                 &trans             &trans              &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_BRI_UP C_BRI_DEC>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        SYM {
            // ------------------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |                    |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |                    |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |        |  |  boot  |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |                    | ENT |     | ALT |

            bindings = <
&trans  &kp GRAVE  &kp LEFT_BRACKET  &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp TILDE                   &kp CARET  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp GRAVE  &trans
&trans  &kp MINUS  &kp ASTERISK      &kp EQUAL       &kp UNDERSCORE        &kp DOLLAR                  &kp COLON  &sk RGUI               &sk RALT         &sk RCTRL          &sk RSHFT  &trans
&trans  &kp PLUS   &kp PIPE          &kp AT_SIGN     &kp SLASH             &kp PERCENT  &none  &trans  &kp HASH   &kp BACKSLASH          &kp AMPERSAND    &kp EXCL           &kp QMARK  &trans
                                     &trans          &trans                &trans                      &trans     &trans                 &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        NUM {
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                   &kp NUMBER_6  &kp N7    &kp N8    &kp N9     &kp NUMBER_0  &trans
&trans  &sk LSHFT     &sk LCTRL     &sk LALT      &sk LGUI      &kp F11                  &kp F12       &sk RGUI  &sk RALT  &sk RCTRL  &sk RSHFT     &trans
&trans  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5   &trans  &trans  &kp F6        &kp F7    &kp F8    &kp F9     &kp F10       &trans
                                    &trans        &trans        &trans                   &trans        &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        system {
            bindings = <
&bootloader  &trans        &trans        &trans        &trans        &trans                        &trans  &trans  &trans  &trans  &trans  &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                         &trans        &trans        &trans                        &trans  &trans  &trans
            >;
        };

        PAD {
            bindings = <
&bootloader  &trans        &trans        &trans        &trans        &trans                        &trans  &kp N7  &kp N8  &kp N9  &kp MINUS     &trans
&trans       &sk LSHFT     &sk LCTRL     &sk LALT      &sk LGUI      &trans                        &trans  &kp N4  &kp N5  &kp N6  &kp PLUS      &trans
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &kp N1  &kp N2  &kp N3  &kp KP_ENTER  &trans
                                         &trans        &trans        &trans                        &kp N0  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PAGE_UP>;
        };

        FUN {
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F12                  &trans  &trans    &trans    &trans     &trans     &bootloader
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11                  &trans  &sk RGUI  &sk RALT  &sk RCTRL  &sk RSHFT  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans  &trans  &trans  &trans    &trans    &trans     &trans     &trans
                        &trans  &trans  &trans                   &trans  &trans    &trans
            >;
        };
    };

    //    conditional_layers {
    //        compatible = "zmk,conditional-layers";
    //
    //        num_act {
    //            if-layers = <1 2>;
    //            then-layer = <3>;
    //        };
    //    };
};
